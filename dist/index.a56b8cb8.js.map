{"mappings":"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","sources":["Script/index.js"],"sourcesContent":["// VARIABLE\n\nlet gameBoard = document.querySelector(\".gr\");\nlet player = document.querySelector(\".player\");\nlet tower = document.querySelector(\".tower\");\nlet playerPosY = 0;\nlet playerPosX = 0;\nlet velocity = 0;\nlet gravity = 0.5;\nlet movingLeft = false;\nlet movingRight = false;\nlet isJumping = false;\nlet step = 5;\nlet npcFacingDirection = \"right\";\n\nlet facingDirection = \"right\";\nplayer.style.position = \"absolute\";\n\nlet npc = document.querySelector(\".npc\");\nlet npcPosY = 0;\nlet npcPosX = 500;\nlet npcVelocity = 0;\nlet npcMovingDirection = 0; // 0: immobile, -1: gauche, 1: droite\nlet npcStep = 2; // Vitesse de déplacement plus faible que le joueur\n\nnpc.style.position = \"absolute\";\n\n// Appliquer la gravité au NPC\nfunction applyGravityToNPC() {\n  npcVelocity += gravity;\n  npcPosY += npcVelocity;\n\n  if (npcPosY > window.innerHeight - npc.offsetHeight) {\n    npcPosY = window.innerHeight - npc.offsetHeight;\n    npcVelocity = 0;\n  }\n\n  npc.style.top = `${npcPosY}px`;\n}\n\n// Mettre à jour la position du NPC\nfunction updateNPCPosition() {\n  npcPosX += npcMovingDirection * npcStep;\n  if (npcPosX < 0) npcPosX = 0;\n  if (npcPosX > window.innerWidth - npc.offsetWidth)\n    npcPosX = window.innerWidth - npc.offsetWidth;\n  npc.style.left = `${npcPosX}px`;\n}\n\n// Changer la direction du NPC aléatoirement\nfunction changeNPCDirection() {\n  let directions = [-1, 0, 1];\n  let randomIndex = Math.floor(Math.random() * directions.length);\n  npcMovingDirection = directions[randomIndex];\n  console.log(`Direction choisie: ${npcMovingDirection}`); // Débogage\n}\n\n// GRAVITER\nfunction applyGravity() {\n  velocity += gravity;\n  playerPosY += velocity;\n\n  if (playerPosY > window.innerHeight - player.offsetHeight) {\n    playerPosY = window.innerHeight - player.offsetHeight;\n    velocity = 0;\n  }\n\n  player.style.top = `${playerPosY}px`;\n}\n\nfunction updateNPCBehavior() {\n  const distanceToPlayer = playerPosX - npcPosX;\n  const detectionRange = 200; // Distance à laquelle le NPC commence à réagir\n  const aggressiveSpeed = 3; // Vitesse accrue lorsque le NPC fonce\n\n  if (Math.abs(distanceToPlayer) < detectionRange) {\n    // Le joueur est à portée, le NPC fonce vers le joueur\n    npcMovingDirection = distanceToPlayer > 0 ? 1 : -1; // Détermine la direction\n    npcStep = aggressiveSpeed; // Augmente la vitesse\n  } else {\n    // Le joueur est loin, le NPC reprend son comportement normal\n    npcStep = 2; // Vitesse normale\n  }\n}\n\n// COLISION\nfunction checkCollision() {\n  let playerRect = player.getBoundingClientRect();\n  let npcRect = npc.getBoundingClientRect();\n  let gameBoardRect = gameBoard.getBoundingClientRect();\n  let towerRect = tower.getBoundingClientRect();\n\n  let tolerance = 1;\n\n  // Gestion des collisions pour le joueur\n  if (\n    playerRect.right - tolerance > gameBoardRect.left &&\n    playerRect.left + tolerance < gameBoardRect.right &&\n    playerRect.bottom - tolerance > gameBoardRect.top &&\n    playerRect.top + tolerance < gameBoardRect.bottom\n  ) {\n    handlePlayerCollision(gameBoardRect);\n  } else if (\n    playerRect.right - tolerance > towerRect.left &&\n    playerRect.left + tolerance < towerRect.right &&\n    playerRect.bottom - tolerance > towerRect.top &&\n    playerRect.top + tolerance < towerRect.bottom\n  ) {\n    handlePlayerCollision(towerRect);\n  }\n\n  // Gestion des collisions pour le NPC\n  if (\n    npcRect.right - tolerance > gameBoardRect.left &&\n    npcRect.left + tolerance < gameBoardRect.right &&\n    npcRect.bottom - tolerance > gameBoardRect.top &&\n    npcRect.top + tolerance < gameBoardRect.bottom\n  ) {\n    handleNPCCollision(gameBoardRect);\n  } else if (\n    npcRect.right - tolerance > towerRect.left &&\n    npcRect.left + tolerance < towerRect.right &&\n    npcRect.bottom - tolerance > towerRect.top &&\n    npcRect.top + tolerance < towerRect.bottom\n  ) {\n    handleNPCCollision(towerRect);\n  }\n}\n\nfunction handlePlayerCollision(collisionRect) {\n  let playerRect = player.getBoundingClientRect();\n  let verticalCollision = playerRect.bottom - collisionRect.top;\n  let horizontalCollisionLeft = collisionRect.right - playerRect.left;\n  let horizontalCollisionRight = playerRect.right - collisionRect.left;\n\n  if (\n    verticalCollision < horizontalCollisionLeft &&\n    verticalCollision < horizontalCollisionRight\n  ) {\n    // Collision verticale\n    velocity = 0;\n    playerPosY = collisionRect.top - player.offsetHeight;\n    isJumping = false;\n  } else {\n    // Collision latérale\n    if (facingDirection === \"right\") {\n      playerPosX = collisionRect.left - player.offsetWidth;\n    } else if (facingDirection === \"left\") {\n      playerPosX = collisionRect.right;\n    }\n  }\n\n  player.style.top = `${playerPosY}px`;\n  player.style.left = `${playerPosX}px`;\n}\n\nfunction handleNPCCollision(collisionRect) {\n  let npcRect = npc.getBoundingClientRect();\n  let verticalCollision = npcRect.bottom - collisionRect.top;\n  let horizontalCollisionLeft = collisionRect.right - npcRect.left;\n  let horizontalCollisionRight = npcRect.right - collisionRect.left;\n\n  if (\n    verticalCollision < horizontalCollisionLeft &&\n    verticalCollision < horizontalCollisionRight\n  ) {\n    // Collision verticale\n    npcVelocity = 0;\n    npcPosY = collisionRect.top - npc.offsetHeight;\n    npcIsJumping = false;\n  } else {\n    // Collision latérale\n    if (npcFacingDirection === \"right\") {\n      npcPosX = collisionRect.left - npc.offsetWidth;\n    } else if (npcFacingDirection === \"left\") {\n      npcPosX = collisionRect.right;\n    }\n  }\n\n  npc.style.top = `${npcPosY}px`;\n  npc.style.left = `${npcPosX}px`;\n}\n\n// GESTION DU SAUT DU JOUEUR\nfunction jump() {\n  if (isJumping) {\n    velocity += gravity;\n    playerPosY += velocity;\n\n    if (playerPosY > window.innerHeight - player.offsetHeight) {\n      playerPosY = window.innerHeight - player.offsetHeight;\n      velocity = 0;\n      isJumping = false;\n    }\n  }\n\n  player.style.top = `${playerPosY}px`;\n}\n\nfunction updatePlayerPosition() {\n  const step = 5;\n  if (movingLeft) {\n    playerPosX -= step;\n    facingDirection = \"left\"; // Mise à jour de la direction\n    if (playerPosX < 0) playerPosX = 0;\n  }\n  if (movingRight) {\n    playerPosX += step;\n    facingDirection = \"right\"; // Mise à jour de la direction\n    if (playerPosX > window.innerWidth - player.offsetWidth) {\n      playerPosX = window.innerWidth - player.offsetWidth;\n    }\n  }\n  player.style.left = `${playerPosX}px`;\n}\n\n// GESTION DES TOUCHE DE DEPLACEMENT ET DE SAUT\ndocument.addEventListener(\"keydown\", function (event) {\n  if ((event.key === \"Space\" || event.key === \"ArrowUp\") && !isJumping) {\n    isJumping = true;\n    velocity = -10;\n  }\n  if (event.key === \"ArrowLeft\" || event.key === \"a\") {\n    movingLeft = true;\n  } else if (event.key === \"ArrowRight\" || event.key === \"d\") {\n    movingRight = true;\n  }\n});\n\ndocument.addEventListener(\"keyup\", function (event) {\n  if (event.key === \"ArrowLeft\" || event.key === \"a\") {\n    movingLeft = false;\n  } else if (event.key === \"ArrowRight\" || event.key === \"d\") {\n    movingRight = false;\n  }\n});\n\nlet npcStartPosX = 500; // Position de départ\nlet maxDistance = 300; // Distance maximale de déplacement\nlet npcAutoMoveDirection = 1; // 1 pour droite, -1 pour gauche\n\n// Fonction pour gérer le déplacement automatique du NPC\nfunction autoMoveNPC() {\n  // Calculer la distance parcourue depuis la position de départ\n  let distanceFromStart = Math.abs(npcPosX - npcStartPosX);\n\n  // Changer la direction si la distance maximale est atteinte\n  if (distanceFromStart >= maxDistance) {\n    npcAutoMoveDirection *= -1; // Change la direction\n    npcStartPosX = npcPosX; // Réinitialiser la position de départ\n  }\n\n  // Mettre à jour la position du NPC\n  npcPosX += npcAutoMoveDirection * npcStep;\n  // Assurer que le NPC reste dans les limites de l'écran\n  if (npcPosX < 0) npcPosX = 0;\n  if (npcPosX > window.innerWidth - npc.offsetWidth)\n    npcPosX = window.innerWidth - npc.offsetWidth;\n}\n// GESTION DU LOOP DU JEU\n\nfunction gameLoop() {\n  applyGravity();\n  applyGravityToNPC();\n  updatePlayerPosition();\n  updateNPCPosition();\n  autoMoveNPC();\n  updateNPCBehavior();\n  checkCollision();\n\n  jump();\n  requestAnimationFrame(gameLoop);\n}\n// LANCEMENT DU JEU AU CHARGEMENT DE LA PAGE\ngameLoop();\n"],"names":[],"version":3,"file":"index.a56b8cb8.js.map","sourceRoot":"/__parcel_source_root/"}